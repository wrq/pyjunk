def pair_sums_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg):
    __mypyc_self__ :: dice.pair_sums_gen
    type, value, traceback, arg :: object
    r0 :: dice.pair_sums_env
    r1 :: int
    r2 :: object
    r3 :: bit
    r4 :: bool
    r5, r6 :: object
    r7, r8 :: bool
    r9, r10 :: object
    r11 :: bool
    r12 :: object
    r13 :: str
    r14, r15, r16 :: object
    r17 :: object[2]
    r18 :: object_ptr
    r19 :: object
    r20 :: bool
    r21, r22 :: object
    r23 :: str
    r24, r25 :: object
    r26 :: list
    r27 :: object
    r28 :: str
    r29 :: object
    r30 :: object[2]
    r31 :: object_ptr
    r32 :: object
    r33 :: list
    r34 :: tuple[object, list]
    r35 :: object
    r36 :: tuple[object, object]
    r37 :: object
    r38 :: bool
    r39 :: object
    r40, r41 :: bit
    r42 :: object
    r43 :: bool
    r44 :: native_int
    r45, r46 :: bit
    r47 :: bool
    r48 :: bit
    r49 :: native_int
    r50, r51 :: bit
    r52 :: bool
    r53 :: bit
    r54 :: bool
    r55 :: object
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L43 (error at pair_sums:9) else goto L1
L1:
    r1 = r0.__mypyc_next_label__
    if is_error(r1) goto L44 (error at pair_sums:9) else goto L33
L2:
    r2 = load_address _Py_NoneStruct
    r3 = type != r2
    if r3 goto L45 else goto L5 :: bool
L3:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at pair_sums:9) else goto L4 :: bool
L4:
    unreachable
L5:
    r4 = raise RuntimeError('mypyc internal error: should be unreachable')
    if not r4 goto L44 (error at pair_sums:10) else goto L6 :: bool
L6:
    r5 = box(None, 1)
    r6 = PyObject_GetIter(r5)
    if is_error(r6) goto L44 (error at pair_sums:10) else goto L7
L7:
    inc_ref r5
    r0.__mypyc_temp__0 = r5; r7 = is_error
    if not r7 goto L46 (error at pair_sums:-1) else goto L8 :: bool
L8:
    r0.__mypyc_temp__1 = r6; r8 = is_error
    if not r8 goto L44 (error at pair_sums:-1) else goto L9 :: bool
L9:
    r9 = r0.__mypyc_temp__1
    if is_error(r9) goto L44 (error at pair_sums:10) else goto L10
L10:
    r10 = PyIter_Next(r9)
    dec_ref r9
    if is_error(r10) goto L29 else goto L11
L11:
    r0.perm = r10; r11 = is_error
    if not r11 goto L44 (error at pair_sums:10) else goto L12 :: bool
L12:
    r12 = more_itertools :: module
    r13 = 'distinct_combinations'
    r14 = CPyObject_GetAttr(r12, r13)
    if is_error(r14) goto L44 (error at pair_sums:11) else goto L13
L13:
    r15 = r0.perm
    if is_error(r15) goto L47 (error at pair_sums:11) else goto L14
L14:
    r16 = box(short_int, 4)
    r17 = [r15, r16]
    r18 = load_address r17
    r19 = _PyObject_Vectorcall(r14, r18, 2, 0)
    dec_ref r14
    if is_error(r19) goto L48 (error at pair_sums:11) else goto L15
L15:
    dec_ref r15
    dec_ref r16
    r0.dcombs = r19; r20 = is_error
    if not r20 goto L44 (error at pair_sums:11) else goto L16 :: bool
L16:
    r21 = r0.perm
    if is_error(r21) goto L44 (error at pair_sums:12) else goto L17
L17:
    r22 = builtins :: module
    r23 = 'sum'
    r24 = CPyObject_GetAttr(r22, r23)
    if is_error(r24) goto L49 (error at pair_sums:12) else goto L18
L18:
    r25 = r0.dcombs
    if is_error(r25) goto L50 (error at pair_sums:12) else goto L19
L19:
    r26 = PySequence_List(r25)
    dec_ref r25
    if is_error(r26) goto L50 (error at pair_sums:12) else goto L20
L20:
    r27 = builtins :: module
    r28 = 'map'
    r29 = CPyObject_GetAttr(r27, r28)
    if is_error(r29) goto L51 (error at pair_sums:12) else goto L21
L21:
    r30 = [r24, r26]
    r31 = load_address r30
    r32 = _PyObject_Vectorcall(r29, r31, 2, 0)
    dec_ref r29
    if is_error(r32) goto L51 (error at pair_sums:12) else goto L22
L22:
    dec_ref r24
    dec_ref r26
    r33 = PySequence_List(r32)
    dec_ref r32
    if is_error(r33) goto L49 (error at pair_sums:12) else goto L23
L23:
    r34 = (r21, r33)
    dec_ref r21
    dec_ref r33
    r35 = box(tuple[object, list], r34)
    r36 = unbox(tuple[object, object], r35)
    dec_ref r35
    if is_error(r36) goto L44 (error at pair_sums:12) else goto L24
L24:
    r37 = box(tuple[object, object], r36)
    r0.__mypyc_next_label__ = 2; r38 = is_error
    dec_ref r0
    if not r38 goto L52 (error at pair_sums:12) else goto L25 :: bool
L25:
    return r37
L26:
    r39 = load_address _Py_NoneStruct
    r40 = type != r39
    if r40 goto L53 else goto L9 :: bool
L27:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at pair_sums:12) else goto L28 :: bool
L28:
    unreachable
L29:
    r41 = CPy_NoErrOccured()
    if not r41 goto L44 (error at pair_sums:10) else goto L30 :: bool
L30:
    r42 = box(None, 1)
    r0.__mypyc_next_label__ = -2; r43 = is_error
    dec_ref r0
    if not r43 goto L43 (error at pair_sums:9) else goto L31 :: bool
L31:
    CPyGen_SetStopIterationValue(r42)
    if not 0 goto L43 else goto L32 :: bool
L32:
    unreachable
L33:
    r44 = r1 & 1
    r45 = r44 == 0
    if r45 goto L34 else goto L35 :: bool
L34:
    r46 = r1 == 0
    r47 = r46
    goto L36
L35:
    r48 = CPyTagged_IsEq_(r1, 0)
    r47 = r48
L36:
    if r47 goto L54 else goto L37 :: bool
L37:
    r49 = r1 & 1
    r50 = r49 == 0
    if r50 goto L38 else goto L39 :: bool
L38:
    r51 = r1 == 2
    dec_ref r1 :: int
    r52 = r51
    goto L40
L39:
    r53 = CPyTagged_IsEq_(r1, 2)
    dec_ref r1 :: int
    r52 = r53
L40:
    if r52 goto L26 else goto L55 :: bool
L41:
    r54 = raise StopIteration
    if not r54 goto L43 (error at pair_sums:9) else goto L42 :: bool
L42:
    unreachable
L43:
    r55 = <error> :: object
    return r55
L44:
    dec_ref r0
    goto L43
L45:
    dec_ref r0
    goto L3
L46:
    dec_ref r0
    dec_ref r6
    goto L43
L47:
    dec_ref r0
    dec_ref r14
    goto L43
L48:
    dec_ref r0
    dec_ref r15
    dec_ref r16
    goto L43
L49:
    dec_ref r0
    dec_ref r21
    goto L43
L50:
    dec_ref r0
    dec_ref r21
    dec_ref r24
    goto L43
L51:
    dec_ref r0
    dec_ref r21
    dec_ref r24
    dec_ref r26
    goto L43
L52:
    dec_ref r37
    goto L43
L53:
    dec_ref r0
    goto L27
L54:
    dec_ref r1 :: int
    goto L2
L55:
    dec_ref r0
    goto L41

def pair_sums_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: dice.pair_sums_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = pair_sums_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def pair_sums_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: dice.pair_sums_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = pair_sums_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def pair_sums_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: dice.pair_sums_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def pair_sums_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: dice.pair_sums_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = pair_sums_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def pair_sums_gen.close(__mypyc_self__):
    __mypyc_self__ :: dice.pair_sums_gen
    r0 :: bool
    r1 :: object
L0:
    r0 = raise RuntimeError('close method on generator classes unimplemented')
    if not r0 goto L2 else goto L1 :: bool
L1:
    unreachable
L2:
    r1 = <error> :: object
    return r1

def pair_sums():
    r0 :: dice.pair_sums_env
    r1 :: dice.pair_sums_gen
    r2, r3 :: bool
    r4 :: object
L0:
    r0 = pair_sums_env()
    if is_error(r0) goto L5 (error at pair_sums:9) else goto L1
L1:
    r1 = pair_sums_gen()
    if is_error(r1) goto L6 (error at pair_sums:9) else goto L2
L2:
    inc_ref r0
    r1.__mypyc_env__ = r0; r2 = is_error
    if not r2 goto L7 (error at pair_sums:9) else goto L3 :: bool
L3:
    r0.__mypyc_next_label__ = 0; r3 = is_error
    dec_ref r0
    if not r3 goto L8 (error at pair_sums:9) else goto L4 :: bool
L4:
    return r1
L5:
    r4 = <error> :: object
    return r4
L6:
    dec_ref r0
    goto L5
L7:
    dec_ref r0
    dec_ref r1
    goto L5
L8:
    dec_ref r1
    goto L5

def sum_ratios():
    r0 :: list
    aux :: object
    r1 :: dict
    res, r2, r3, r4, psum, r5, r6, r7, r8, e :: object
    r9 :: str
    r10 :: object[2]
    r11 :: object_ptr
    r12 :: object
    r13, r14 :: bit
    r15 :: short_int
    r16, s :: object
    r17 :: bit
    r18 :: str
    r19 :: object[2]
    r20 :: object_ptr
    r21, c :: object
    r22 :: int
    r23, l, r24 :: object
    r25 :: tuple[object, object, object]
    r26 :: object
    r27 :: int32
    r28 :: bit
    r29 :: short_int
    r30, r31 :: object
L0:
    r0 = PyList_New(0)
    if is_error(r0) goto L20 (error at sum_ratios:18) else goto L1
L1:
    aux = r0
    r1 = PyDict_New()
    if is_error(r1) goto L21 (error at sum_ratios:19) else goto L2
L2:
    res = r1
    r2 = pair_sums()
    if is_error(r2) goto L22 (error at sum_ratios:20) else goto L3
L3:
    r3 = PyObject_GetIter(r2)
    dec_ref r2
    if is_error(r3) goto L22 (error at sum_ratios:20) else goto L4
L4:
    r4 = PyIter_Next(r3)
    if is_error(r4) goto L23 else goto L5
L5:
    psum = r4
    r5 = box(short_int, 2)
    r6 = PyObject_GetItem(psum, r5)
    dec_ref psum
    dec_ref r5
    if is_error(r6) goto L24 (error at sum_ratios:21) else goto L6
L6:
    r7 = PyObject_GetIter(r6)
    dec_ref r6
    if is_error(r7) goto L24 (error at sum_ratios:21) else goto L7
L7:
    r8 = PyIter_Next(r7)
    if is_error(r8) goto L25 else goto L8
L8:
    e = r8
    r9 = 'append'
    r10 = [aux, e]
    r11 = load_address r10
    r12 = PyObject_VectorcallMethod(r9, r11, 9223372036854775810, 0)
    if is_error(r12) goto L26 (error at sum_ratios:23) else goto L27
L9:
    dec_ref e
    goto L7
L10:
    r13 = CPy_NoErrOccured()
    if not r13 goto L24 (error at sum_ratios:21) else goto L4 :: bool
L11:
    r14 = CPy_NoErrOccured()
    if not r14 goto L22 (error at sum_ratios:20) else goto L12 :: bool
L12:
    r15 = 4
    r16 = box(short_int, r15)
    s = r16
L13:
    r17 = r15 < 26 :: signed
    if r17 goto L14 else goto L28 :: bool
L14:
    r18 = 'count'
    r19 = [aux, s]
    r20 = load_address r19
    r21 = PyObject_VectorcallMethod(r18, r20, 9223372036854775810, 0)
    if is_error(r21) goto L29 (error at sum_ratios:26) else goto L15
L15:
    c = r21
    r22 = CPyObject_Size(aux)
    if is_error(r22) goto L30 (error at sum_ratios:27) else goto L16
L16:
    r23 = box(int, r22)
    l = r23
    r24 = PyNumber_TrueDivide(c, l)
    if is_error(r24) goto L31 (error at sum_ratios:28) else goto L17
L17:
    r25 = (c, l, r24)
    dec_ref c
    dec_ref l
    dec_ref r24
    r26 = box(tuple[object, object, object], r25)
    r27 = PyObject_SetItem(res, s, r26)
    dec_ref s
    dec_ref r26
    r28 = r27 >= 0 :: signed
    if not r28 goto L22 (error at sum_ratios:28) else goto L18 :: bool
L18:
    r29 = r15 + 2
    r15 = r29
    r30 = box(short_int, r29)
    s = r30
    goto L13
L19:
    return res
L20:
    r31 = <error> :: object
    return r31
L21:
    dec_ref aux
    goto L20
L22:
    dec_ref aux
    dec_ref res
    goto L20
L23:
    dec_ref r3
    goto L11
L24:
    dec_ref aux
    dec_ref res
    dec_ref r3
    goto L20
L25:
    dec_ref r7
    goto L10
L26:
    dec_ref aux
    dec_ref res
    dec_ref r3
    dec_ref r7
    dec_ref e
    goto L20
L27:
    dec_ref r12
    goto L9
L28:
    dec_ref aux
    dec_ref s
    goto L19
L29:
    dec_ref aux
    dec_ref res
    dec_ref s
    goto L20
L30:
    dec_ref aux
    dec_ref res
    dec_ref s
    dec_ref c
    goto L20
L31:
    dec_ref aux
    dec_ref res
    dec_ref s
    dec_ref c
    dec_ref l
    goto L20

def sums_from_dice(dice):
    dice, r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: str
    r5, r6 :: object
    r7 :: object[2]
    r8 :: object_ptr
    r9 :: object
    r10 :: list
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: object[2]
    r15 :: object_ptr
    r16 :: object
    r17 :: set
    r18 :: object
L0:
    r0 = builtins :: module
    r1 = 'sum'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L8 (error at sums_from_dice:36) else goto L1
L1:
    r3 = more_itertools :: module
    r4 = 'distinct_combinations'
    r5 = CPyObject_GetAttr(r3, r4)
    if is_error(r5) goto L9 (error at sums_from_dice:36) else goto L2
L2:
    r6 = box(short_int, 4)
    r7 = [dice, r6]
    r8 = load_address r7
    r9 = _PyObject_Vectorcall(r5, r8, 2, 0)
    dec_ref r5
    if is_error(r9) goto L10 (error at sums_from_dice:36) else goto L3
L3:
    dec_ref r6
    r10 = PySequence_List(r9)
    dec_ref r9
    if is_error(r10) goto L9 (error at sums_from_dice:36) else goto L4
L4:
    r11 = builtins :: module
    r12 = 'map'
    r13 = CPyObject_GetAttr(r11, r12)
    if is_error(r13) goto L11 (error at sums_from_dice:36) else goto L5
L5:
    r14 = [r2, r10]
    r15 = load_address r14
    r16 = _PyObject_Vectorcall(r13, r15, 2, 0)
    dec_ref r13
    if is_error(r16) goto L11 (error at sums_from_dice:36) else goto L6
L6:
    dec_ref r2
    dec_ref r10
    r17 = PySet_New(r16)
    dec_ref r16
    if is_error(r17) goto L8 (error at sums_from_dice:36) else goto L7
L7:
    return r17
L8:
    r18 = <error> :: object
    return r18
L9:
    dec_ref r2
    goto L8
L10:
    dec_ref r2
    dec_ref r6
    goto L8
L11:
    dec_ref r2
    dec_ref r10
    goto L8

def sum_n_dice(n):
    n :: object
    r0 :: list
    r1 :: int
    r2, _, r3, r4 :: object
    r5 :: int32
    r6 :: bit
    r7 :: bool
    r8 :: object
    r9 :: str
    r10 :: object
    r11 :: dict
    r12 :: str
    r13 :: object
    r14 :: list
    r15 :: object[1]
    r16 :: object_ptr
    r17 :: object
    r18 :: int32
    r19 :: bit
    r20 :: int
    r21, r22 :: object
    r23 :: str
    r24 :: object
    r25 :: object[1]
    r26 :: object_ptr
    r27, r28 :: object
L0:
    r0 = PyList_New(0)
    if is_error(r0) goto L14 (error at sum_n_dice:44) else goto L1
L1:
    r1 = 0
    inc_ref r1 :: int
    r2 = box(int, r1)
    _ = r2
    dec_ref _
L2:
    inc_ref r1 :: int
    r3 = box(int, r1)
    r4 = PyObject_RichCompare(r3, n, 0)
    dec_ref r3
    if is_error(r4) goto L15 (error at sum_n_dice:44) else goto L3
L3:
    r5 = PyObject_IsTrue(r4)
    dec_ref r4
    r6 = r5 >= 0 :: signed
    if not r6 goto L15 (error at sum_n_dice:44) else goto L4 :: bool
L4:
    r7 = truncate r5: int32 to builtins.bool
    if r7 goto L5 else goto L16 :: bool
L5:
    r8 = random :: module
    r9 = 'choice'
    r10 = CPyObject_GetAttr(r8, r9)
    if is_error(r10) goto L15 (error at sum_n_dice:44) else goto L6
L6:
    r11 = dice.globals :: static
    r12 = 'dice'
    r13 = CPyDict_GetItem(r11, r12)
    if is_error(r13) goto L17 (error at sum_n_dice:44) else goto L7
L7:
    r14 = cast(list, r13)
    if is_error(r14) goto L17 (error at sum_n_dice:44) else goto L8
L8:
    r15 = [r14]
    r16 = load_address r15
    r17 = _PyObject_Vectorcall(r10, r16, 1, 0)
    dec_ref r10
    if is_error(r17) goto L18 (error at sum_n_dice:44) else goto L9
L9:
    dec_ref r14
    r18 = PyList_Append(r0, r17)
    dec_ref r17
    r19 = r18 >= 0 :: signed
    if not r19 goto L15 (error at sum_n_dice:44) else goto L10 :: bool
L10:
    r20 = CPyTagged_Add(r1, 2)
    dec_ref r1 :: int
    inc_ref r20 :: int
    r1 = r20
    r21 = box(int, r20)
    _ = r21
    dec_ref _
    goto L2
L11:
    r22 = builtins :: module
    r23 = 'sum'
    r24 = CPyObject_GetAttr(r22, r23)
    if is_error(r24) goto L19 (error at sum_n_dice:44) else goto L12
L12:
    r25 = [r0]
    r26 = load_address r25
    r27 = _PyObject_Vectorcall(r24, r26, 1, 0)
    dec_ref r24
    if is_error(r27) goto L19 (error at sum_n_dice:44) else goto L13
L13:
    dec_ref r0
    return r27
L14:
    r28 = <error> :: object
    return r28
L15:
    dec_ref r0
    dec_ref r1 :: int
    goto L14
L16:
    dec_ref r1 :: int
    goto L11
L17:
    dec_ref r0
    dec_ref r1 :: int
    dec_ref r10
    goto L14
L18:
    dec_ref r0
    dec_ref r1 :: int
    dec_ref r14
    goto L14
L19:
    dec_ref r0
    goto L14

def dice_fight(x, y):
    x, y, r0, xwins, r1, ywins :: object
    r2 :: short_int
    r3, _ :: object
    r4 :: bit
    r5, xsum, r6, ysum, r7 :: object
    r8 :: int32
    r9 :: bit
    r10 :: bool
    r11, r12, r13 :: object
    r14 :: int32
    r15 :: bit
    r16 :: bool
    r17, r18, r19 :: object
    r20 :: int32
    r21 :: bit
    r22 :: bool
    r23 :: short_int
    r24 :: object
    r25, r26, r27, r28, r29 :: str
    r30 :: object[3]
    r31 :: object_ptr
    r32 :: object
    r33, r34, r35, r36 :: str
    r37 :: object[3]
    r38 :: object_ptr
    r39 :: object
    r40, r41 :: str
    r42 :: object
    r43, r44 :: str
    r45 :: object[3]
    r46 :: object_ptr
    r47 :: object
    r48 :: list
    r49, r50, r51, r52, r53, r54, r55 :: ptr
    r56 :: str
    r57 :: object
    r58 :: str
    r59 :: object
    r60 :: object[1]
    r61 :: object_ptr
    r62, r63, r64 :: object
L0:
    r0 = box(short_int, 0)
    xwins = r0
    r1 = box(short_int, 0)
    ywins = r1
    r2 = 0
    r3 = box(short_int, r2)
    _ = r3
    dec_ref _
L1:
    r4 = r2 < 20000000 :: signed
    if r4 goto L2 else goto L18 :: bool
L2:
    r5 = sum_n_dice(x)
    if is_error(r5) goto L28 (error at dice_fight:52) else goto L3
L3:
    xsum = r5
    r6 = sum_n_dice(y)
    if is_error(r6) goto L29 (error at dice_fight:53) else goto L4
L4:
    ysum = r6
    r7 = PyObject_RichCompare(xsum, ysum, 4)
    if is_error(r7) goto L30 (error at dice_fight:55) else goto L5
L5:
    r8 = PyObject_IsTrue(r7)
    dec_ref r7
    r9 = r8 >= 0 :: signed
    if not r9 goto L30 (error at dice_fight:55) else goto L6 :: bool
L6:
    r10 = truncate r8: int32 to builtins.bool
    if r10 goto L7 else goto L9 :: bool
L7:
    r11 = box(short_int, 2)
    r12 = PyNumber_InPlaceAdd(xwins, r11)
    dec_ref xwins
    dec_ref r11
    if is_error(r12) goto L31 (error at dice_fight:56) else goto L8
L8:
    xwins = r12
L9:
    r13 = PyObject_RichCompare(xsum, ysum, 0)
    if is_error(r13) goto L30 (error at dice_fight:57) else goto L10
L10:
    r14 = PyObject_IsTrue(r13)
    dec_ref r13
    r15 = r14 >= 0 :: signed
    if not r15 goto L30 (error at dice_fight:57) else goto L11 :: bool
L11:
    r16 = truncate r14: int32 to builtins.bool
    if r16 goto L12 else goto L14 :: bool
L12:
    r17 = box(short_int, 2)
    r18 = PyNumber_InPlaceAdd(ywins, r17)
    dec_ref ywins
    dec_ref r17
    if is_error(r18) goto L32 (error at dice_fight:58) else goto L13
L13:
    ywins = r18
L14:
    r19 = PyObject_RichCompare(xsum, ysum, 2)
    dec_ref xsum
    dec_ref ysum
    if is_error(r19) goto L28 (error at dice_fight:59) else goto L15
L15:
    r20 = PyObject_IsTrue(r19)
    dec_ref r19
    r21 = r20 >= 0 :: signed
    if not r21 goto L28 (error at dice_fight:59) else goto L16 :: bool
L16:
    r22 = truncate r20: int32 to builtins.bool
    if r22 goto L17 else goto L17 :: bool
L17:
    r23 = r2 + 2
    r2 = r23
    r24 = box(short_int, r23)
    _ = r24
    dec_ref _
    goto L1
L18:
    r25 = ''
    r26 = 'xwins = '
    r27 = '{:{}}'
    r28 = ''
    r29 = 'format'
    r30 = [r27, xwins, r28]
    r31 = load_address r30
    r32 = PyObject_VectorcallMethod(r29, r31, 9223372036854775811, 0)
    if is_error(r32) goto L28 (error at dice_fight:62) else goto L19
L19:
    r33 = ' ywins = '
    r34 = '{:{}}'
    r35 = ''
    r36 = 'format'
    r37 = [r34, ywins, r35]
    r38 = load_address r37
    r39 = PyObject_VectorcallMethod(r36, r38, 9223372036854775811, 0)
    if is_error(r39) goto L33 (error at dice_fight:62) else goto L20
L20:
    r40 = ' ratio = '
    r41 = '{:{}}'
    r42 = PyNumber_TrueDivide(xwins, ywins)
    dec_ref xwins
    dec_ref ywins
    if is_error(r42) goto L34 (error at dice_fight:62) else goto L21
L21:
    r43 = ''
    r44 = 'format'
    r45 = [r41, r42, r43]
    r46 = load_address r45
    r47 = PyObject_VectorcallMethod(r44, r46, 9223372036854775811, 0)
    if is_error(r47) goto L35 (error at dice_fight:62) else goto L22
L22:
    dec_ref r42
    r48 = PyList_New(6)
    if is_error(r48) goto L36 (error at dice_fight:62) else goto L23
L23:
    r49 = get_element_ptr r48 ob_item :: PyListObject
    r50 = load_mem r49 :: ptr*
    inc_ref r26
    set_mem r50, r26 :: builtins.object*
    r51 = r50 + 8
    set_mem r51, r32 :: builtins.object*
    r52 = r50 + 16
    inc_ref r33
    set_mem r52, r33 :: builtins.object*
    r53 = r50 + 24
    set_mem r53, r39 :: builtins.object*
    r54 = r50 + 32
    inc_ref r40
    set_mem r54, r40 :: builtins.object*
    r55 = r50 + 40
    set_mem r55, r47 :: builtins.object*
    r56 = PyUnicode_Join(r25, r48)
    dec_ref r48
    if is_error(r56) goto L27 (error at dice_fight:62) else goto L24
L24:
    r57 = builtins :: module
    r58 = 'print'
    r59 = CPyObject_GetAttr(r57, r58)
    if is_error(r59) goto L37 (error at dice_fight:62) else goto L25
L25:
    r60 = [r56]
    r61 = load_address r60
    r62 = _PyObject_Vectorcall(r59, r61, 1, 0)
    dec_ref r59
    if is_error(r62) goto L37 (error at dice_fight:62) else goto L38
L26:
    dec_ref r56
    r63 = box(None, 1)
    inc_ref r63
    return r63
L27:
    r64 = <error> :: object
    return r64
L28:
    dec_ref xwins
    dec_ref ywins
    goto L27
L29:
    dec_ref xwins
    dec_ref ywins
    dec_ref xsum
    goto L27
L30:
    dec_ref xwins
    dec_ref ywins
    dec_ref xsum
    dec_ref ysum
    goto L27
L31:
    dec_ref ywins
    dec_ref xsum
    dec_ref ysum
    goto L27
L32:
    dec_ref xwins
    dec_ref xsum
    dec_ref ysum
    goto L27
L33:
    dec_ref xwins
    dec_ref ywins
    dec_ref r32
    goto L27
L34:
    dec_ref r32
    dec_ref r39
    goto L27
L35:
    dec_ref r32
    dec_ref r39
    dec_ref r42
    goto L27
L36:
    dec_ref r32
    dec_ref r39
    dec_ref r47
    goto L27
L37:
    dec_ref r56
    goto L27
L38:
    dec_ref r62
    goto L26

def dice_fight2():
    r0, two_wins, r1, three_wins, r2, draws :: object
    r3 :: dict
    r4 :: str
    r5 :: object
    r6 :: list
    r7 :: short_int
    r8 :: ptr
    r9 :: native_int
    r10 :: short_int
    r11 :: bit
    r12 :: object
    r13 :: tuple
    two :: object
    r14 :: dict
    r15 :: str
    r16 :: object
    r17 :: list
    r18 :: short_int
    r19 :: ptr
    r20 :: native_int
    r21 :: short_int
    r22 :: bit
    r23 :: object
    r24 :: tuple
    three, r25 :: object
    r26 :: str
    r27 :: object
    r28 :: object[1]
    r29 :: object_ptr
    r30, r31 :: object
    r32 :: str
    r33 :: object
    r34 :: object[1]
    r35 :: object_ptr
    r36, r37 :: object
    r38 :: int32
    r39 :: bit
    r40 :: bool
    r41, r42, r43 :: object
    r44 :: str
    r45 :: object
    r46 :: object[1]
    r47 :: object_ptr
    r48, r49 :: object
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54, r55 :: object
    r56 :: int32
    r57 :: bit
    r58 :: bool
    r59, r60, r61 :: object
    r62 :: str
    r63 :: object
    r64 :: object[1]
    r65 :: object_ptr
    r66, r67 :: object
    r68 :: str
    r69 :: object
    r70 :: object[1]
    r71 :: object_ptr
    r72, r73 :: object
    r74 :: int32
    r75 :: bit
    r76 :: bool
    r77, r78 :: object
    r79, r80 :: short_int
    r81, r82, r83, r84, r85 :: str
    r86 :: object[3]
    r87 :: object_ptr
    r88 :: object
    r89, r90, r91, r92 :: str
    r93 :: object[3]
    r94 :: object_ptr
    r95 :: object
    r96, r97, r98, r99 :: str
    r100 :: object[3]
    r101 :: object_ptr
    r102 :: object
    r103 :: list
    r104, r105, r106, r107, r108, r109, r110 :: ptr
    r111 :: str
    r112 :: object
    r113 :: str
    r114 :: object
    r115 :: object[1]
    r116 :: object_ptr
    r117, r118, r119, total :: object
    r120, r121, r122 :: str
    r123 :: object
    r124, r125 :: str
    r126 :: object[3]
    r127 :: object_ptr
    r128 :: object
    r129, r130 :: str
    r131 :: object
    r132, r133 :: str
    r134 :: object[3]
    r135 :: object_ptr
    r136 :: object
    r137, r138 :: str
    r139 :: object
    r140, r141 :: str
    r142 :: object[3]
    r143 :: object_ptr
    r144 :: object
    r145 :: list
    r146, r147, r148, r149, r150, r151, r152 :: ptr
    r153 :: str
    r154 :: object
    r155 :: str
    r156 :: object
    r157 :: object[1]
    r158 :: object_ptr
    r159, r160, r161 :: object
L0:
    r0 = box(short_int, 0)
    two_wins = r0
    r1 = box(short_int, 0)
    three_wins = r1
    r2 = box(short_int, 0)
    draws = r2
    r3 = dice.globals :: static
    r4 = 'all_twos'
    r5 = CPyDict_GetItem(r3, r4)
    if is_error(r5) goto L60 (error at dice_fight2:73) else goto L1
L1:
    r6 = cast(list, r5)
    if is_error(r6) goto L60 (error at dice_fight2:73) else goto L2
L2:
    r7 = 0
L3:
    r8 = get_element_ptr r6 ob_size :: PyVarObject
    r9 = load_mem r8 :: native_int*
    r10 = r9 << 1
    r11 = r7 < r10 :: signed
    if r11 goto L4 else goto L61 :: bool
L4:
    r12 = CPyList_GetItemUnsafe(r6, r7)
    r13 = cast(tuple, r12)
    if is_error(r13) goto L62 (error at dice_fight2:73) else goto L5
L5:
    two = r13
    r14 = dice.globals :: static
    r15 = 'all_threes'
    r16 = CPyDict_GetItem(r14, r15)
    if is_error(r16) goto L63 (error at dice_fight2:74) else goto L6
L6:
    r17 = cast(list, r16)
    if is_error(r17) goto L63 (error at dice_fight2:74) else goto L7
L7:
    r18 = 0
L8:
    r19 = get_element_ptr r17 ob_size :: PyVarObject
    r20 = load_mem r19 :: native_int*
    r21 = r20 << 1
    r22 = r18 < r21 :: signed
    if r22 goto L9 else goto L64 :: bool
L9:
    r23 = CPyList_GetItemUnsafe(r17, r18)
    r24 = cast(tuple, r23)
    if is_error(r24) goto L65 (error at dice_fight2:74) else goto L10
L10:
    three = r24
    r25 = builtins :: module
    r26 = 'sum'
    r27 = CPyObject_GetAttr(r25, r26)
    if is_error(r27) goto L66 (error at dice_fight2:75) else goto L11
L11:
    r28 = [two]
    r29 = load_address r28
    r30 = _PyObject_Vectorcall(r27, r29, 1, 0)
    dec_ref r27
    if is_error(r30) goto L66 (error at dice_fight2:75) else goto L12
L12:
    r31 = builtins :: module
    r32 = 'sum'
    r33 = CPyObject_GetAttr(r31, r32)
    if is_error(r33) goto L67 (error at dice_fight2:75) else goto L13
L13:
    r34 = [three]
    r35 = load_address r34
    r36 = _PyObject_Vectorcall(r33, r35, 1, 0)
    dec_ref r33
    if is_error(r36) goto L67 (error at dice_fight2:75) else goto L14
L14:
    r37 = PyObject_RichCompare(r30, r36, 4)
    dec_ref r30
    dec_ref r36
    if is_error(r37) goto L66 (error at dice_fight2:75) else goto L15
L15:
    r38 = PyObject_IsTrue(r37)
    dec_ref r37
    r39 = r38 >= 0 :: signed
    if not r39 goto L66 (error at dice_fight2:75) else goto L16 :: bool
L16:
    r40 = truncate r38: int32 to builtins.bool
    if r40 goto L17 else goto L19 :: bool
L17:
    r41 = box(short_int, 2)
    r42 = PyNumber_InPlaceAdd(two_wins, r41)
    dec_ref two_wins
    dec_ref r41
    if is_error(r42) goto L68 (error at dice_fight2:76) else goto L18
L18:
    two_wins = r42
L19:
    r43 = builtins :: module
    r44 = 'sum'
    r45 = CPyObject_GetAttr(r43, r44)
    if is_error(r45) goto L66 (error at dice_fight2:77) else goto L20
L20:
    r46 = [two]
    r47 = load_address r46
    r48 = _PyObject_Vectorcall(r45, r47, 1, 0)
    dec_ref r45
    if is_error(r48) goto L66 (error at dice_fight2:77) else goto L21
L21:
    r49 = builtins :: module
    r50 = 'sum'
    r51 = CPyObject_GetAttr(r49, r50)
    if is_error(r51) goto L69 (error at dice_fight2:77) else goto L22
L22:
    r52 = [three]
    r53 = load_address r52
    r54 = _PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L69 (error at dice_fight2:77) else goto L23
L23:
    r55 = PyObject_RichCompare(r48, r54, 0)
    dec_ref r48
    dec_ref r54
    if is_error(r55) goto L66 (error at dice_fight2:77) else goto L24
L24:
    r56 = PyObject_IsTrue(r55)
    dec_ref r55
    r57 = r56 >= 0 :: signed
    if not r57 goto L66 (error at dice_fight2:77) else goto L25 :: bool
L25:
    r58 = truncate r56: int32 to builtins.bool
    if r58 goto L26 else goto L28 :: bool
L26:
    r59 = box(short_int, 2)
    r60 = PyNumber_InPlaceAdd(three_wins, r59)
    dec_ref three_wins
    dec_ref r59
    if is_error(r60) goto L70 (error at dice_fight2:78) else goto L27
L27:
    three_wins = r60
L28:
    r61 = builtins :: module
    r62 = 'sum'
    r63 = CPyObject_GetAttr(r61, r62)
    if is_error(r63) goto L66 (error at dice_fight2:79) else goto L29
L29:
    r64 = [two]
    r65 = load_address r64
    r66 = _PyObject_Vectorcall(r63, r65, 1, 0)
    dec_ref r63
    if is_error(r66) goto L66 (error at dice_fight2:79) else goto L30
L30:
    r67 = builtins :: module
    r68 = 'sum'
    r69 = CPyObject_GetAttr(r67, r68)
    if is_error(r69) goto L71 (error at dice_fight2:79) else goto L31
L31:
    r70 = [three]
    r71 = load_address r70
    r72 = _PyObject_Vectorcall(r69, r71, 1, 0)
    dec_ref r69
    if is_error(r72) goto L71 (error at dice_fight2:79) else goto L32
L32:
    dec_ref three
    r73 = PyObject_RichCompare(r66, r72, 2)
    dec_ref r66
    dec_ref r72
    if is_error(r73) goto L65 (error at dice_fight2:79) else goto L33
L33:
    r74 = PyObject_IsTrue(r73)
    dec_ref r73
    r75 = r74 >= 0 :: signed
    if not r75 goto L65 (error at dice_fight2:79) else goto L34 :: bool
L34:
    r76 = truncate r74: int32 to builtins.bool
    if r76 goto L35 else goto L37 :: bool
L35:
    r77 = box(short_int, 2)
    r78 = PyNumber_InPlaceAdd(draws, r77)
    dec_ref draws
    dec_ref r77
    if is_error(r78) goto L72 (error at dice_fight2:80) else goto L36
L36:
    draws = r78
L37:
    r79 = r18 + 2
    r18 = r79
    goto L8
L38:
    r80 = r7 + 2
    r7 = r80
    goto L3
L39:
    r81 = ''
    r82 = 'two_wins: '
    r83 = '{:{}}'
    r84 = ''
    r85 = 'format'
    r86 = [r83, two_wins, r84]
    r87 = load_address r86
    r88 = PyObject_VectorcallMethod(r85, r87, 9223372036854775811, 0)
    if is_error(r88) goto L60 (error at dice_fight2:82) else goto L40
L40:
    r89 = ' three_wins: '
    r90 = '{:{}}'
    r91 = ''
    r92 = 'format'
    r93 = [r90, three_wins, r91]
    r94 = load_address r93
    r95 = PyObject_VectorcallMethod(r92, r94, 9223372036854775811, 0)
    if is_error(r95) goto L73 (error at dice_fight2:82) else goto L41
L41:
    r96 = ' draws: '
    r97 = '{:{}}'
    r98 = ''
    r99 = 'format'
    r100 = [r97, draws, r98]
    r101 = load_address r100
    r102 = PyObject_VectorcallMethod(r99, r101, 9223372036854775811, 0)
    if is_error(r102) goto L74 (error at dice_fight2:82) else goto L42
L42:
    r103 = PyList_New(6)
    if is_error(r103) goto L75 (error at dice_fight2:82) else goto L43
L43:
    r104 = get_element_ptr r103 ob_item :: PyListObject
    r105 = load_mem r104 :: ptr*
    inc_ref r82
    set_mem r105, r82 :: builtins.object*
    r106 = r105 + 8
    set_mem r106, r88 :: builtins.object*
    r107 = r105 + 16
    inc_ref r89
    set_mem r107, r89 :: builtins.object*
    r108 = r105 + 24
    set_mem r108, r95 :: builtins.object*
    r109 = r105 + 32
    inc_ref r96
    set_mem r109, r96 :: builtins.object*
    r110 = r105 + 40
    set_mem r110, r102 :: builtins.object*
    r111 = PyUnicode_Join(r81, r103)
    dec_ref r103
    if is_error(r111) goto L60 (error at dice_fight2:82) else goto L44
L44:
    r112 = builtins :: module
    r113 = 'print'
    r114 = CPyObject_GetAttr(r112, r113)
    if is_error(r114) goto L76 (error at dice_fight2:82) else goto L45
L45:
    r115 = [r111]
    r116 = load_address r115
    r117 = _PyObject_Vectorcall(r114, r116, 1, 0)
    dec_ref r114
    if is_error(r117) goto L76 (error at dice_fight2:82) else goto L77
L46:
    dec_ref r111
    r118 = PyNumber_Add(two_wins, three_wins)
    if is_error(r118) goto L60 (error at dice_fight2:83) else goto L47
L47:
    r119 = PyNumber_Add(r118, draws)
    dec_ref r118
    if is_error(r119) goto L60 (error at dice_fight2:83) else goto L48
L48:
    total = r119
    r120 = ''
    r121 = 'ODDS - two_wins '
    r122 = '{:{}}'
    r123 = PyNumber_TrueDivide(two_wins, total)
    dec_ref two_wins
    if is_error(r123) goto L78 (error at dice_fight2:84) else goto L49
L49:
    r124 = ''
    r125 = 'format'
    r126 = [r122, r123, r124]
    r127 = load_address r126
    r128 = PyObject_VectorcallMethod(r125, r127, 9223372036854775811, 0)
    if is_error(r128) goto L79 (error at dice_fight2:84) else goto L50
L50:
    dec_ref r123
    r129 = ' three_wins: '
    r130 = '{:{}}'
    r131 = PyNumber_TrueDivide(three_wins, total)
    dec_ref three_wins
    if is_error(r131) goto L80 (error at dice_fight2:84) else goto L51
L51:
    r132 = ''
    r133 = 'format'
    r134 = [r130, r131, r132]
    r135 = load_address r134
    r136 = PyObject_VectorcallMethod(r133, r135, 9223372036854775811, 0)
    if is_error(r136) goto L81 (error at dice_fight2:84) else goto L52
L52:
    dec_ref r131
    r137 = ' draws: '
    r138 = '{:{}}'
    r139 = PyNumber_TrueDivide(draws, total)
    dec_ref draws
    dec_ref total
    if is_error(r139) goto L82 (error at dice_fight2:84) else goto L53
L53:
    r140 = ''
    r141 = 'format'
    r142 = [r138, r139, r140]
    r143 = load_address r142
    r144 = PyObject_VectorcallMethod(r141, r143, 9223372036854775811, 0)
    if is_error(r144) goto L83 (error at dice_fight2:84) else goto L54
L54:
    dec_ref r139
    r145 = PyList_New(6)
    if is_error(r145) goto L84 (error at dice_fight2:84) else goto L55
L55:
    r146 = get_element_ptr r145 ob_item :: PyListObject
    r147 = load_mem r146 :: ptr*
    inc_ref r121
    set_mem r147, r121 :: builtins.object*
    r148 = r147 + 8
    set_mem r148, r128 :: builtins.object*
    r149 = r147 + 16
    inc_ref r129
    set_mem r149, r129 :: builtins.object*
    r150 = r147 + 24
    set_mem r150, r136 :: builtins.object*
    r151 = r147 + 32
    inc_ref r137
    set_mem r151, r137 :: builtins.object*
    r152 = r147 + 40
    set_mem r152, r144 :: builtins.object*
    r153 = PyUnicode_Join(r120, r145)
    dec_ref r145
    if is_error(r153) goto L59 (error at dice_fight2:84) else goto L56
L56:
    r154 = builtins :: module
    r155 = 'print'
    r156 = CPyObject_GetAttr(r154, r155)
    if is_error(r156) goto L85 (error at dice_fight2:84) else goto L57
L57:
    r157 = [r153]
    r158 = load_address r157
    r159 = _PyObject_Vectorcall(r156, r158, 1, 0)
    dec_ref r156
    if is_error(r159) goto L85 (error at dice_fight2:84) else goto L86
L58:
    dec_ref r153
    r160 = box(None, 1)
    inc_ref r160
    return r160
L59:
    r161 = <error> :: object
    return r161
L60:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    goto L59
L61:
    dec_ref r6
    goto L39
L62:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    goto L59
L63:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    goto L59
L64:
    dec_ref two
    dec_ref r17
    goto L38
L65:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    goto L59
L66:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    goto L59
L67:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    dec_ref r30
    goto L59
L68:
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    goto L59
L69:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    dec_ref r48
    goto L59
L70:
    dec_ref two_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    goto L59
L71:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r6
    dec_ref two
    dec_ref r17
    dec_ref three
    dec_ref r66
    goto L59
L72:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref r6
    dec_ref two
    dec_ref r17
    goto L59
L73:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r88
    goto L59
L74:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r88
    dec_ref r95
    goto L59
L75:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r88
    dec_ref r95
    dec_ref r102
    goto L59
L76:
    dec_ref two_wins
    dec_ref three_wins
    dec_ref draws
    dec_ref r111
    goto L59
L77:
    dec_ref r117
    goto L46
L78:
    dec_ref three_wins
    dec_ref draws
    dec_ref total
    goto L59
L79:
    dec_ref three_wins
    dec_ref draws
    dec_ref total
    dec_ref r123
    goto L59
L80:
    dec_ref draws
    dec_ref total
    dec_ref r128
    goto L59
L81:
    dec_ref draws
    dec_ref total
    dec_ref r128
    dec_ref r131
    goto L59
L82:
    dec_ref r128
    dec_ref r136
    goto L59
L83:
    dec_ref r128
    dec_ref r136
    dec_ref r139
    goto L59
L84:
    dec_ref r128
    dec_ref r136
    dec_ref r144
    goto L59
L85:
    dec_ref r153
    goto L59
L86:
    dec_ref r159
    goto L58

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: dict
    r6, r7 :: object
    r8 :: bit
    r9 :: str
    r10 :: object
    r11 :: dict
    r12 :: str
    r13 :: object
    r14 :: str
    r15 :: int32
    r16 :: bit
    r17 :: dict
    r18, r19 :: object
    r20 :: bit
    r21 :: str
    r22 :: object
    r23 :: dict
    r24 :: str
    r25 :: object
    r26 :: str
    r27 :: int32
    r28 :: bit
    r29 :: dict
    r30, r31 :: object
    r32 :: bit
    r33 :: str
    r34 :: object
    r35 :: dict
    r36 :: str
    r37 :: object
    r38 :: str
    r39 :: int32
    r40 :: bit
    r41 :: list
    r42, r43, r44, r45, r46, r47 :: object
    r48, r49, r50, r51, r52, r53, r54 :: ptr
    r55 :: dict
    r56 :: str
    r57 :: int32
    r58 :: bit
    r59 :: dict
    r60 :: str
    r61 :: object
    r62 :: list
    r63 :: object
    r64 :: str
    r65 :: object
    r66 :: object[1]
    r67 :: object_ptr
    r68, r69 :: object
    r70 :: str
    r71 :: object
    r72 :: list
    r73, r74, r75, r76, r77, r78 :: object
    r79, r80, r81, r82, r83, r84, r85 :: ptr
    r86 :: list
    r87 :: object
    r88 :: object[2]
    r89 :: object_ptr
    r90 :: object
    r91 :: list
    r92 :: dict
    r93 :: str
    r94 :: int32
    r95 :: bit
    r96 :: object
    r97 :: str
    r98 :: object
    r99 :: list
    r100, r101, r102, r103, r104, r105 :: object
    r106, r107, r108, r109, r110, r111, r112 :: ptr
    r113 :: list
    r114 :: object
    r115 :: object[2]
    r116 :: object_ptr
    r117 :: object
    r118 :: list
    r119 :: dict
    r120 :: str
    r121 :: int32
    r122 :: bit
    r123 :: object
    r124 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L38 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = dice.globals :: static
    r6 = random :: module
    r7 = load_address _Py_NoneStruct
    r8 = r6 != r7
    if r8 goto L6 else goto L4 :: bool
L4:
    r9 = 'random'
    r10 = PyImport_Import(r9)
    if is_error(r10) goto L38 (error at <module>:1) else goto L5
L5:
    random = r10 :: module
    dec_ref r10
L6:
    r11 = PyImport_GetModuleDict()
    r12 = 'random'
    r13 = CPyDict_GetItem(r11, r12)
    if is_error(r13) goto L38 (error at <module>:1) else goto L7
L7:
    r14 = 'random'
    r15 = CPyDict_SetItem(r5, r14, r13)
    dec_ref r13
    r16 = r15 >= 0 :: signed
    if not r16 goto L38 (error at <module>:1) else goto L8 :: bool
L8:
    r17 = dice.globals :: static
    r18 = itertools :: module
    r19 = load_address _Py_NoneStruct
    r20 = r18 != r19
    if r20 goto L11 else goto L9 :: bool
L9:
    r21 = 'itertools'
    r22 = PyImport_Import(r21)
    if is_error(r22) goto L38 (error at <module>:2) else goto L10
L10:
    itertools = r22 :: module
    dec_ref r22
L11:
    r23 = PyImport_GetModuleDict()
    r24 = 'itertools'
    r25 = CPyDict_GetItem(r23, r24)
    if is_error(r25) goto L38 (error at <module>:2) else goto L12
L12:
    r26 = 'itertools'
    r27 = CPyDict_SetItem(r17, r26, r25)
    dec_ref r25
    r28 = r27 >= 0 :: signed
    if not r28 goto L38 (error at <module>:2) else goto L13 :: bool
L13:
    r29 = dice.globals :: static
    r30 = more_itertools :: module
    r31 = load_address _Py_NoneStruct
    r32 = r30 != r31
    if r32 goto L16 else goto L14 :: bool
L14:
    r33 = 'more_itertools'
    r34 = PyImport_Import(r33)
    if is_error(r34) goto L38 (error at <module>:3) else goto L15
L15:
    more_itertools = r34 :: module
    dec_ref r34
L16:
    r35 = PyImport_GetModuleDict()
    r36 = 'more_itertools'
    r37 = CPyDict_GetItem(r35, r36)
    if is_error(r37) goto L38 (error at <module>:3) else goto L17
L17:
    r38 = 'more'
    r39 = CPyDict_SetItem(r29, r38, r37)
    dec_ref r37
    r40 = r39 >= 0 :: signed
    if not r40 goto L38 (error at <module>:3) else goto L18 :: bool
L18:
    r41 = PyList_New(6)
    if is_error(r41) goto L38 (error at <module>:5) else goto L19
L19:
    r42 = box(short_int, 2)
    r43 = box(short_int, 4)
    r44 = box(short_int, 6)
    r45 = box(short_int, 8)
    r46 = box(short_int, 10)
    r47 = box(short_int, 12)
    r48 = get_element_ptr r41 ob_item :: PyListObject
    r49 = load_mem r48 :: ptr*
    set_mem r49, r42 :: builtins.object*
    r50 = r49 + 8
    set_mem r50, r43 :: builtins.object*
    r51 = r49 + 16
    set_mem r51, r44 :: builtins.object*
    r52 = r49 + 24
    set_mem r52, r45 :: builtins.object*
    r53 = r49 + 32
    set_mem r53, r46 :: builtins.object*
    r54 = r49 + 40
    set_mem r54, r47 :: builtins.object*
    r55 = dice.globals :: static
    r56 = 'dice'
    r57 = CPyDict_SetItem(r55, r56, r41)
    dec_ref r41
    r58 = r57 >= 0 :: signed
    if not r58 goto L38 (error at <module>:5) else goto L20 :: bool
L20:
    r59 = dice.globals :: static
    r60 = 'dice'
    r61 = CPyDict_GetItem(r59, r60)
    if is_error(r61) goto L38 (error at <module>:41) else goto L21
L21:
    r62 = cast(list, r61)
    if is_error(r62) goto L38 (error at <module>:41) else goto L22
L22:
    r63 = builtins :: module
    r64 = 'print'
    r65 = CPyObject_GetAttr(r63, r64)
    if is_error(r65) goto L39 (error at <module>:41) else goto L23
L23:
    r66 = [r62]
    r67 = load_address r66
    r68 = _PyObject_Vectorcall(r65, r67, 1, 0)
    dec_ref r65
    if is_error(r68) goto L39 (error at <module>:41) else goto L40
L24:
    dec_ref r62
    r69 = more_itertools :: module
    r70 = 'distinct_combinations'
    r71 = CPyObject_GetAttr(r69, r70)
    if is_error(r71) goto L38 (error at <module>:66) else goto L25
L25:
    r72 = PyList_New(6)
    if is_error(r72) goto L41 (error at <module>:66) else goto L26
L26:
    r73 = box(short_int, 2)
    r74 = box(short_int, 4)
    r75 = box(short_int, 6)
    r76 = box(short_int, 8)
    r77 = box(short_int, 10)
    r78 = box(short_int, 12)
    r79 = get_element_ptr r72 ob_item :: PyListObject
    r80 = load_mem r79 :: ptr*
    set_mem r80, r73 :: builtins.object*
    r81 = r80 + 8
    set_mem r81, r74 :: builtins.object*
    r82 = r80 + 16
    set_mem r82, r75 :: builtins.object*
    r83 = r80 + 24
    set_mem r83, r76 :: builtins.object*
    r84 = r80 + 32
    set_mem r84, r77 :: builtins.object*
    r85 = r80 + 40
    set_mem r85, r78 :: builtins.object*
    r86 = CPySequence_Multiply(r72, 4)
    dec_ref r72
    if is_error(r86) goto L41 (error at <module>:66) else goto L27
L27:
    r87 = box(short_int, 4)
    r88 = [r86, r87]
    r89 = load_address r88
    r90 = _PyObject_Vectorcall(r71, r89, 2, 0)
    dec_ref r71
    if is_error(r90) goto L42 (error at <module>:66) else goto L28
L28:
    dec_ref r86
    dec_ref r87
    r91 = PySequence_List(r90)
    dec_ref r90
    if is_error(r91) goto L38 (error at <module>:66) else goto L29
L29:
    r92 = dice.globals :: static
    r93 = 'all_twos'
    r94 = CPyDict_SetItem(r92, r93, r91)
    dec_ref r91
    r95 = r94 >= 0 :: signed
    if not r95 goto L38 (error at <module>:66) else goto L30 :: bool
L30:
    r96 = more_itertools :: module
    r97 = 'distinct_combinations'
    r98 = CPyObject_GetAttr(r96, r97)
    if is_error(r98) goto L38 (error at <module>:67) else goto L31
L31:
    r99 = PyList_New(6)
    if is_error(r99) goto L43 (error at <module>:67) else goto L32
L32:
    r100 = box(short_int, 2)
    r101 = box(short_int, 4)
    r102 = box(short_int, 6)
    r103 = box(short_int, 8)
    r104 = box(short_int, 10)
    r105 = box(short_int, 12)
    r106 = get_element_ptr r99 ob_item :: PyListObject
    r107 = load_mem r106 :: ptr*
    set_mem r107, r100 :: builtins.object*
    r108 = r107 + 8
    set_mem r108, r101 :: builtins.object*
    r109 = r107 + 16
    set_mem r109, r102 :: builtins.object*
    r110 = r107 + 24
    set_mem r110, r103 :: builtins.object*
    r111 = r107 + 32
    set_mem r111, r104 :: builtins.object*
    r112 = r107 + 40
    set_mem r112, r105 :: builtins.object*
    r113 = CPySequence_Multiply(r99, 6)
    dec_ref r99
    if is_error(r113) goto L43 (error at <module>:67) else goto L33
L33:
    r114 = box(short_int, 6)
    r115 = [r113, r114]
    r116 = load_address r115
    r117 = _PyObject_Vectorcall(r98, r116, 2, 0)
    dec_ref r98
    if is_error(r117) goto L44 (error at <module>:67) else goto L34
L34:
    dec_ref r113
    dec_ref r114
    r118 = PySequence_List(r117)
    dec_ref r117
    if is_error(r118) goto L38 (error at <module>:67) else goto L35
L35:
    r119 = dice.globals :: static
    r120 = 'all_threes'
    r121 = CPyDict_SetItem(r119, r120, r118)
    dec_ref r118
    r122 = r121 >= 0 :: signed
    if not r122 goto L38 (error at <module>:67) else goto L36 :: bool
L36:
    r123 = dice_fight2()
    if is_error(r123) goto L38 (error at <module>:86) else goto L45
L37:
    return 1
L38:
    r124 = <error> :: None
    return r124
L39:
    dec_ref r62
    goto L38
L40:
    dec_ref r68
    goto L24
L41:
    dec_ref r71
    goto L38
L42:
    dec_ref r86
    dec_ref r87
    goto L38
L43:
    dec_ref r98
    goto L38
L44:
    dec_ref r113
    dec_ref r114
    goto L38
L45:
    dec_ref r123
    goto L37
